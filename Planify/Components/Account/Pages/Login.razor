@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Planify.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="row w-75 shadow rounded overflow-hidden">
        <!-- Login Form Section -->
        <div class="col-md-6 bg-white p-5">
            <h2 class="mb-4">Iniciar sesión</h2>
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="form-group mb-3">
                    <label for="Input.Email" class="form-label">Usuario</label>
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="Ingresa tu correo"/>
                    <ValidationMessage For="() => Input.Email" class="text-danger"/>
                </div>
                <div class="form-group mb-3">
                    <label for="Input.Password" class="form-label">Contraseña</label>
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Contraseña"/>
                    <ValidationMessage For="() => Input.Password" class="text-danger"/>
                </div>
                <div class="d-flex justify-content-between mb-3">
                    <div class="form-check">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input"/>
                        <label class="form-check-label">Recuérdame</label>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary w-100" style="background-color: #ff8b14; border: none;">Iniciar sesión</button>
            </EditForm>
        </div>
        <!-- Welcome Section -->
        <div class="col-md-6 d-flex flex-column justify-content-center align-items-center text-white" style="background-color: #ff8b14;">
            <h2 class="mb-3">Bienvenido de nuevo!</h2>
            <p>No tienes una cuenta?</p>
            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="btn btn-outline-light">Registrate</a>
        </div>
    </div>
</div>


@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}