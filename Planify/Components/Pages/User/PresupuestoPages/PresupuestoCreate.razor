@page "/Presupuesto/Create"
@inject EventosService eventosServices
@inject ArticulosService articulosService
@inject PresupuestosService presupuestoService
@inject NavigationManager nav 
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
<AuthorizeView>
    <Authorized>
    <EditForm Model="Presupuesto" OnValidSubmit="Guardar" FormName="presupuesto">
        <ChildContent Context="presupuestoContext">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <PageTitle>Qu√© necesitas para tu evento?</PageTitle>
            <div class="container-fluid px-1 py-5 mx-auto">
                <div class="row d-flex justify-content-center">
                    <div class="card">
                        <div class="card">
                            <h5 class="text-center mb-4">Crea tu presupuesto</h5>

                            <div class="row justify-content-between text-left">
                                <div class="form-group col-sm-6 flex-column d-flex">

                                    <div class="form-group col-sm-6 flex-column d-flex">
                                        <label class="form-control-label px-3">PresupuestoId<span class="text-danger"> *</span></label>
                                        <InputNumber class="form-control" @bind-Value="Presupuesto.PresupuestoId" readonly />
                                    </div>
                                    
                                    <label class="form-control-label px-3">Evento<span class="text-danger"> *</span></label>
                                    <InputSelect class="form-control" @bind-Value="Presupuesto.EventoId">
                                        <option value="0" selected disabled> Seleccione un evento </option>
                                        @foreach (var evento in ListaEventos)
                                        {
                                            <option value="@evento.EventoId"> @evento.NombreEvento
                                            </option>
                                        }
                                    </InputSelect>

                                </div>
                                <div class="form-group col-sm-6 flex-column d-flex">
                                    <label class="form-control-label px-3">Fecha<span class="text-danger"> *</span></label>
                                    <InputDate class="form-control" @bind-Value="Presupuesto.Fecha" readonly />
                                </div>
                                
                            </div>
                        </div>
                        <div class="border border-success p-3 mt-3">
                            <ProductoPicker
                                ArticulosList="ListaArticulos"
                                ArticuloId="DetalleSeleccionado.ArticuloId"
                                Cantidad="DetalleSeleccionado.Cantidad"
                                ArticuloSeleccionado="HandleArticuloSeleccionado"
                            />
                            <table class="table table-light">
                                <thead class="table table-striped">
                                <tr class="text-center">
                                    <th>Articulo</th>
                                    <th>Cantidad</th>
                                    <th>Remover</th>
                                </tr>
                                </thead>
                                <tbody class="text-center">
                                @foreach (var detalle in Presupuesto.PresupuestosDetalles)
                                {
                                <tr class="text-center">
                                    <td>@detalle.Articulo.Nombre</td>
                                    <td>@detalle.Cantidad</td>
                                    <td>
                                        <button type="button" @onclick="() => EliminarDetalle(detalle)" class="btn btn-outline-danger bi bi-trash mt-2"> Remover</button>
                                    </td>
                                </tr>
                                }
                                </tbody>
                            </table>
                            <hr />
                        </div>
                        <div class="row justify-content-end">
                                <div class="form-group col-sm-6">
                                    <button type="submit" class="btn btn-primary btn-block">Guardar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
        </ChildContent>
    </EditForm>
    </Authorized>
</AuthorizeView>

@code {
    
    public Presupuestos Presupuesto { get; set; } = new Presupuestos();
    public List<Eventos> ListaEventos = new List<Eventos>();
    public PresupuestosDetalle DetalleSeleccionado { get; set; } = new();
    public List<Articulos> ListaArticulos = new List<Articulos>();
    
    private async Task Guardar()
    {
        try
        {
            var userid = await ObtenerUserId();
            Presupuesto.UserId = userid;
            await presupuestoService.Guardar(Presupuesto);
            nav.NavigateTo("/Presupuestos");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        
    }
    
    protected override async Task OnInitializedAsync()
    {
        var userId = await ObtenerUserId();
        ListaEventos = await eventosServices.Listar(e=>e.UserId == userId);
        ListaArticulos = await articulosService.Listar(a => a.ArticuloId > -4);
        Presupuesto.Fecha = DateTime.Now;
    }
    
    private async Task<string?> ObtenerUserId()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user is { Identity: { IsAuthenticated: true } })
            {
                return user.FindFirst(ClaimTypes.NameIdentifier)?.Value 
                       ?? user.FindFirst("sub")?.Value; 
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error obteniendo UserId: {ex.Message}");
        }
        return null; 
    }

    private void HandleArticuloSeleccionado((Articulos articulo, int cantidad) selection)
    {
        var articuloseleccionado = ListaArticulos.FirstOrDefault(a => a.ArticuloId == selection.articulo.ArticuloId);

        if (selection.articulo != null)
        {
            var nuevoDetalle = new PresupuestosDetalle
            {
                
                ArticuloId = selection.articulo.ArticuloId,
                Cantidad = selection.cantidad,
                Articulo = articuloseleccionado
            };
            Presupuesto.PresupuestosDetalles.Add(nuevoDetalle);
            Presupuesto.MontoTotal = (float)selection.articulo.Precio;
            DetalleSeleccionado = new PresupuestosDetalle();
            
        }
    }
    
    private void EliminarDetalle(PresupuestosDetalle detalle)
    {
        Presupuesto.PresupuestosDetalles.Remove(detalle);
    }
    
}




