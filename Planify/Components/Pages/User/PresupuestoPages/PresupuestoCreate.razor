@page "/Presupuesto/Create"
@inject EventosService eventosServices
@inject ArticulosService articulosService
@inject PresupuestosService presupuestoService
@inject NavigationManager nav 
@inject UserService user
@rendermode InteractiveServer

@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
<AuthorizeView>
    <Authorized>
    <EditForm Model="Presupuesto" OnValidSubmit="Guardar" FormName="presupuesto">
        <ChildContent Context="presupuestoContext">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div>
                @if (!string.IsNullOrEmpty(MensajeError))
                {
                <div class="alert alert-danger">@MensajeError</div>
                }
            </div>
            <PageTitle>Qu√© necesitas para tu evento?</PageTitle>
            <div class="container-formulario px-1 py-5 mx-auto">
                <div class="row d-flex justify-content-center">
                    <div class="card-formulario">
                        <h5 class="text-center mb-4 texto-azul">Crea tu presupuesto</h5>

                        <div class="row justify-content-between text-left">
                            <div class="formulario-grupo col-sm-6 flex-column d-flex">

                                <div class="formulario-grupo col-sm-6 flex-column d-flex">
                                    <label class="form-control-label px-3">PresupuestoId<span class="text-danger"> *</span></label>
                                    <InputNumber class="formulario-control" @bind-Value="Presupuesto.PresupuestoId" readonly />
                                </div>
                                    
                                <label class="form-control-label px-3">Evento<span class="text-danger"> *</span></label>
                                <InputSelect class="formulario-control" @bind-Value="Presupuesto.EventoId">
                                    <option value="0" selected disabled> Seleccione un evento </option>
                                    @foreach (var evento in ListaEventos)
                                    {
                                        <option value="@evento.EventoId"> @evento.NombreEvento
                                        </option>
                                    }
                                </InputSelect>

                            </div>
                            <div class="formulario-grupo col-sm-6 flex-column d-flex">
                                <label class="form-control-label px-3">Fecha<span class="text-danger"> *</span></label>
                                <InputDate class="formulario-control" @bind-Value="Presupuesto.Fecha" readonly />
                            </div>
                                
                        </div>
                    </div>
                    <div class="card-formulario">
                        <div class="border border-success p-3 mt-3">
                            <h5>Detalle</h5>
                            @*Picker*@
                            <ProductoPicker
                                ArticulosList="ListaArticulos"
                                ArticuloId="DetalleSeleccionado.ArticuloId"
                                Cantidad="DetalleSeleccionado.Cantidad"
                                ArticuloSeleccionado="HandleArticuloSeleccionado"/>
                            
                            @*Tabla Articulos*@
                            <table class="table table-light">
                                <thead class="table table-striped">
                                <tr class="text-center">
                                    <th class="text-lg-start">Articulo</th>
                                    <th>Precio</th>
                                    <th>Cantidad</th>
                                    <th>Remover</th>
                                </tr>
                                </thead>
                                <tbody class="text-center">
                                
                                @*Detalles *@
                                @foreach (var detalle in Presupuesto.PresupuestosDetalles)
                                {
                                    if (detalle.Articulo != null)
                                    {
                                        <tr class="text-center">
                                            <td class="text-lg-start">@detalle.Articulo.Nombre</td>
                                            <td>@detalle.Articulo.Precio</td>
                                            <td>@detalle.Cantidad</td>
                                            <td>
                                                <button type="button" @onclick="() => EliminarDetalle(detalle)" class="btn btn-outline-danger bi bi-trash mt-2"> Remover</button>
                                            </td>
                                        </tr>
                                    }
                                }
                                </tbody>
                            </table>
                            <hr/>
                        </div>
                        @*Footer*@
                        <div class="card-footer d-flex justify-content-between">
                            <label class="ms-3"><strong>Articulos:</strong> @Presupuesto.PresupuestosDetalles.Count</label>
                            <div class="col-5 text-end">
                                <label class="ms-5"><strong>Total:</strong> @Presupuesto.MontoTotal.ToString("N2")</label>
                            </div>
                        </div>
                    </div>
                    
                        
                        
                        @*Botones*@ 
                        <div class="card-footer text-center mt-2">
                            <div class="formulario-grupo">
                                <a href="/Presupuestos" class="btn btn-secondary">Volver</a>
                                <button type="submit" class="btn-enviar btn-block">Guardar</button>
                            </div>
                            </div>
                        </div>
                    </div>
        </ChildContent>
    </EditForm>
    </Authorized>
</AuthorizeView>

@code {

    public Presupuestos Presupuesto { get; set; } = new Presupuestos()
    {
        PresupuestosDetalles = new List<PresupuestosDetalle>() 
    };
    public List<Eventos> ListaEventos = new List<Eventos>();
    public PresupuestosDetalle DetalleSeleccionado { get; set; } = new();
    public List<Articulos> ListaArticulos = new List<Articulos>();
    public string? userId;
    public string MensajeError { get; set; } = string.Empty;
    
    private async Task Guardar()
    {
        try
        { 
            if (Presupuesto.EventoId <= 0)
            {
               MensajeError="Debe seleccionar un evento"; 
               return;
            }
            
            userId = await user.ObtenerUserId();
            Presupuesto.UserId = userId;
         
            bool resultado = await presupuestoService.Guardar(Presupuesto);

            if (resultado)
            {
                nav.NavigateTo("/Presupuestos");
                StateHasChanged(); 
            }
            else
            {
                Console.WriteLine("Hubo un problema guardando el presupuesto.");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error al guardar el presupuesto: {e.Message}");
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        userId = await user.ObtenerUserId();
        ListaEventos = await eventosServices.ListarEventosSinPresupuesto(userId);
        ListaArticulos = await articulosService.Listar(a => a.ArticuloId > -4);
        Presupuesto.Fecha = DateTime.Now;
    }
    
    private void HandleArticuloSeleccionado((Articulos articulo, int cantidad) selection)
    {
        var articuloseleccionado = ListaArticulos.FirstOrDefault(a => a.ArticuloId == selection.articulo.ArticuloId);

        if (selection.articulo != null)
        {
            var nuevoDetalle = new PresupuestosDetalle
            {
                ArticuloId = selection.articulo.ArticuloId,
                Cantidad = selection.cantidad,
                Articulo = articuloseleccionado
            };
            Presupuesto.PresupuestosDetalles.Add(nuevoDetalle);
            Presupuesto.MontoTotal += selection.articulo.Precio * selection.cantidad;
            DetalleSeleccionado = new PresupuestosDetalle();
        }
    }
    
    private void EliminarDetalle(PresupuestosDetalle detalle)
    {
        if (detalle.Articulo != null)
        {
            Presupuesto.MontoTotal -= detalle.Articulo.Precio * detalle.Cantidad;
        }
        Presupuesto.PresupuestosDetalles.Remove(detalle);
        DetalleSeleccionado = new PresupuestosDetalle
        {
            ArticuloId = detalle.ArticuloId,
            Cantidad = detalle.Cantidad
        };
    }
    
}
