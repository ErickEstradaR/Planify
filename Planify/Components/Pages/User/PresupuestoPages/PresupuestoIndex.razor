@page "/Presupuestos"
@inject PresupuestosService presupuestoService
@inject EventosService eventosService
@inject NavigationManager nav
@inject UserService user
@rendermode InteractiveServer

@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.IdentityModel.Tokens

@attribute [Authorize]
<AuthorizeView>
    <Authorized>
<PageTitle>Presupuestos</PageTitle>
    <div class="container">
        <div class="card shadow-lg">
            <div class="card header">
            </div>
            <div class="card-body">
                <h5 class="text-center">Mis Presupuestos</h5>
                <div class="row">
                    <div class="col-3">
                        <InputSelect class="form-select" @bind-Value="@Filtro">
                            <option value="" selected disabled>Elija una opci&oacute;n</option>
                            <option value="PresupuestoId">Id de tu presupuesto</option>
                        </InputSelect>
                    </div>
                    <div class="col-4">
                        <div class="input-group">
                            <div class="col-auto">
                                <button type="button" class="btn btn-outline-secondary bi bi-arrow-clockwise" @onclick="Restablecer"></button>
                            </div>
                            <input class="form-control" @bind="ValorFiltro" placeholder="Buscar"/>
                            <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                            <a href="/Presupuesto/Create" class="btn btn-success">
                                <span class="bi bi-plus-square"></span> Crear
                            </a>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-3">
                            <label class="col-form-label"><strong>Desde</strong></label>
                            <InputDate class="form-control" @bind-Value="FechaDesde" />
                        </div>
                        <div class="col-3">
                            <label class="col-form-label"><strong>Hasta</strong></label>
                            <InputDate class="form-control" @bind-Value="FechaHasta" />
                        </div>
                    </div>
                    
                </div>

                <table class="table table-hover">
                    <thead class="table table-striped text-black">
                    <tr>
                        <th>PresupuestoId</th>
                        <th>Evento</th>
                        <th>Fecha</th>
                        <th>Monto Total</th>
                        <th>Acciones</th>
                        <th>Pagar</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var presupuesto in ListaPresupuestos)
                    {
                        <tr>
                            <td>@presupuesto.PresupuestoId</td>
                            <td>@presupuesto.Evento?.NombreEvento</td>
                            <td>@presupuesto.Fecha.ToShortDateString()</td>
                            <td>@presupuesto.MontoTotal.ToString("N2")</td>
                            <td class="text-lg-start">
                                <a class="btn btn-outline-primary bi bi-pencil-square" href="/Presupuesto/Edit/@presupuesto.PresupuestoId"></a>
                                <button class="btn btn-outline-danger bi bi-trash" @onclick="() => Eliminar(presupuesto.PresupuestoId)"></button>
                            </td>
                            <td class="text-lg-start">
                                <a class="btn btn-outline-primary bi bi-credit-card" href="/Pago/@userId/@presupuesto.PresupuestoId"></a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
                @if (ListaPresupuestos.IsNullOrEmpty())
                {
                    <h6>Parece que no tienes presupuestos creados, que tal si hacemos uno?</h6>
                }
            </div>
            <div class="card-footer d-flex justify-content-between">
                <label class="ms-3"><strong>Cantidad:</strong> @ListaPresupuestos.Count</label>
                <label class="ms-3"><strong>Total Presupuestado:</strong>@ListaPresupuestos.Sum(p=>p.MontoTotal).ToString("N2")</label>
            </div>
        </div>
    </div>
    </Authorized>
</AuthorizeView>

@code
{
    public List<Presupuestos> ListaPresupuestos { get; set; } = new List<Presupuestos>();
    public List<Eventos> EventosList { get; set; } = new List<Eventos>();
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;
    public string? userId;
    public DateTime? FechaDesde { get; set; } = DateTime.Now;
    public DateTime? FechaHasta { get; set; } = DateTime.Now.AddDays(7);

    protected override async Task OnInitializedAsync()
    {
        userId = await user.ObtenerUserId();
        ListaPresupuestos = await presupuestoService.Listar(p => p.UserId == userId);
    }

    @*Buscar Presupuestos segÃºn el filtro*@
    private async Task Buscar()
    {
        
        if (string.IsNullOrEmpty(userId))
        {
            userId = await user.ObtenerUserId(); 
        }
        
        if (Filtro == "PresupuestoId")
        {
            if (int.TryParse(ValorFiltro, out int PresupuestoId))
            {
                ListaPresupuestos = await presupuestoService.Listar(p =>
                    p.PresupuestoId == PresupuestoId &&
                     p.UserId == userId &&
                    p.Fecha >= FechaDesde &&
                    p.Fecha <= FechaHasta); 
            }
        }
    }

    @*Metodo Restablecer para restablecer filtros*@
    private async Task Restablecer()
    {
        
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
    }
    

    private async Task Eliminar(int id)
    {
        await presupuestoService.Eliminar(id);
        ListaPresupuestos = await presupuestoService.Listar(p => p.UserId == userId);
    }
    
}